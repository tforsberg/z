<html>

<head>
<meta http-equiv=Content-Type content="text/html; charset=windows-1252">
<meta name=Generator content="Microsoft Word 14 (filtered)">
<style>
<!--
 /* Font Definitions */
 @font-face
	{font-family:Wingdings;
	panose-1:5 0 0 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:PMingLiU;
	panose-1:2 2 5 0 0 0 0 0 0 0;}
@font-face
	{font-family:"MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"Cambria Math";
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Cambria;
	panose-1:2 4 5 3 5 4 6 3 2 4;}
@font-face
	{font-family:Calibri;
	panose-1:2 15 5 2 2 2 4 3 2 4;}
@font-face
	{font-family:Tahoma;
	panose-1:2 11 6 4 3 5 4 4 2 4;}
@font-face
	{font-family:Consolas;
	panose-1:2 11 6 9 2 2 4 3 2 4;}
@font-face
	{font-family:"\@MS Gothic";
	panose-1:2 11 6 9 7 2 5 8 2 4;}
@font-face
	{font-family:"\@MS Mincho";
	panose-1:2 2 6 9 4 2 5 8 3 4;}
@font-face
	{font-family:"\@PMingLiU";
	panose-1:2 2 5 0 0 0 0 0 0 0;}
 /* Style Definitions */
 p.MsoNormal, li.MsoNormal, div.MsoNormal
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:0in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
h1
	{mso-style-link:"Heading 1 Char";
	margin-top:24.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:14.0pt;
	font-family:"Cambria","serif";
	color:#365F91;}
h2
	{mso-style-link:"Heading 2 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:13.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
h3
	{mso-style-link:"Heading 3 Char";
	margin-top:10.0pt;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:0in;
	margin-bottom:.0001pt;
	line-height:115%;
	page-break-after:avoid;
	font-size:11.0pt;
	font-family:"Cambria","serif";
	color:#4F81BD;}
p.MsoTitle, li.MsoTitle, div.MsoTitle
	{mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:15.0pt;
	margin-left:0in;
	border:none;
	padding:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpFirst, li.MsoTitleCxSpFirst, div.MsoTitleCxSpFirst
	{mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	border:none;
	padding:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpMiddle, li.MsoTitleCxSpMiddle, div.MsoTitleCxSpMiddle
	{mso-style-link:"Title Char";
	margin:0in;
	margin-bottom:.0001pt;
	border:none;
	padding:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
p.MsoTitleCxSpLast, li.MsoTitleCxSpLast, div.MsoTitleCxSpLast
	{mso-style-link:"Title Char";
	margin-top:0in;
	margin-right:0in;
	margin-bottom:15.0pt;
	margin-left:0in;
	border:none;
	padding:0in;
	font-size:26.0pt;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
a:link, span.MsoHyperlink
	{color:blue;
	text-decoration:underline;}
a:visited, span.MsoHyperlinkFollowed
	{color:purple;
	text-decoration:underline;}
p.MsoAcetate, li.MsoAcetate, div.MsoAcetate
	{mso-style-link:"Balloon Text Char";
	margin:0in;
	margin-bottom:.0001pt;
	font-size:8.0pt;
	font-family:"Tahoma","sans-serif";}
p.MsoListParagraph, li.MsoListParagraph, div.MsoListParagraph
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpFirst, li.MsoListParagraphCxSpFirst, div.MsoListParagraphCxSpFirst
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpMiddle, li.MsoListParagraphCxSpMiddle, div.MsoListParagraphCxSpMiddle
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:0in;
	margin-left:.5in;
	margin-bottom:.0001pt;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
p.MsoListParagraphCxSpLast, li.MsoListParagraphCxSpLast, div.MsoListParagraphCxSpLast
	{margin-top:0in;
	margin-right:0in;
	margin-bottom:10.0pt;
	margin-left:.5in;
	line-height:115%;
	font-size:11.0pt;
	font-family:"Calibri","sans-serif";}
span.TitleChar
	{mso-style-name:"Title Char";
	mso-style-link:Title;
	font-family:"Cambria","serif";
	color:#17365D;
	letter-spacing:.25pt;}
span.Heading1Char
	{mso-style-name:"Heading 1 Char";
	mso-style-link:"Heading 1";
	font-family:"Cambria","serif";
	color:#365F91;
	font-weight:bold;}
span.BalloonTextChar
	{mso-style-name:"Balloon Text Char";
	mso-style-link:"Balloon Text";
	font-family:"Tahoma","sans-serif";}
span.Heading2Char
	{mso-style-name:"Heading 2 Char";
	mso-style-link:"Heading 2";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
span.Heading3Char
	{mso-style-name:"Heading 3 Char";
	mso-style-link:"Heading 3";
	font-family:"Cambria","serif";
	color:#4F81BD;
	font-weight:bold;}
.MsoChpDefault
	{font-family:"Calibri","sans-serif";}
.MsoPapDefault
	{margin-bottom:10.0pt;
	line-height:115%;}
@page WordSection1
	{size:8.5in 11.0in;
	margin:1.0in 1.0in 1.0in 1.0in;}
div.WordSection1
	{page:WordSection1;}
 /* List Definitions */
 ol
	{margin-bottom:0in;}
ul
	{margin-bottom:0in;}
-->
</style>

</head>

<body lang=EN-US link=blue vlink=purple>

<div class=WordSection1>

<div style='border:none;border-bottom:solid #4F81BD 1.0pt;padding:0in 0in 4.0pt 0in'>

<p class=MsoTitle>A Shopping Cart Application<br>
Built with AngularJS</p>

</div>

<h1>Introduction</h1>

<p class=MsoNormal>If you want to create any kind of on-line store, you will
probably need a shopping cart.</p>

<p class=MsoNormal>A shopping cart is basically a list that contains products
selected by the user while he shops. When the user is finished shopping, he
will usually examine the list to double-check that the items, quantities, and
prices are correct. If he finds any errors he should be able to edit the list.
Once he is ready, he should be able to check out. The checkout process involves
an exchange of information that results in a sale.</p>

<p class=MsoNormal>Sounds simple, right? And it actually is. The only challenge
is performing the checkout, because that involves personal information and money.
Fortunately, there are services that handle this type of transaction and you
can leverage them. Some of the most popular are <b>PayPal</b> and <b>Google
Wallet</b>.</p>

<p class=MsoNormal>This article describes the implementation of a shopping cart
using JavaScript. The cart uses <b>PayPal</b> and <b>Google Wallet</b> payment services.
Adding other providers is fairly easy. If you have your own payment
infrastructure for example, you can extend the shopping cart to use that in
addition to the <b>PayPal</b> and <b>Google Wallet</b> options. Offering more
payment options should increase sales.</p>

<p class=MsoNormal>The article includes a sample application called “Angular
Store” that demonstrates how to use the shopping cart in <b>AngularJS</b>
applications.</p>

<h1>Shopping Cart Requirements</h1>

<p class=MsoNormal>When I started developing the shopping cart, I had the
following requirements in mind for the shopping cart:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be 100% pure JavaScript (so it is easy to integrate into any site)</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must follow the MVVM architecture (so it is easy to customize its look
and feel)</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be safe (we don't want to be responsible for storing people's
credit card numbers etc.)</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be fast and reliable (we don’t want users to give up before they
checkout!)</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be flexible (it should allow payments to be processed using different
services).</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be extensible (adding new payment methods should be easy)</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'>-<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
</span>Must be easy to use (because there's no reason for it to be complicated)</p>

<p class=MsoNormal>I believe the “shoppingCart” class described below addresses
all these requirements. It uses <b>jQuery</b> and integrates well with <b>AngularJS</b>
applications. The “shoppingCart” class contains all the logic and provides the
object model needed to create flexible and attractive views.</p>

<h1>The Angular Store Sample Application</h1>

<p class=MsoNormal>To understand how the cart works, let’s take a quick look at
a typical application. The Angular Store app has three main views:</p>

<p class=MsoNormal style='page-break-after:avoid'><b>Store</b>: This is the
main view. It presents a list of the products available. Users can search for
items using a filter, get detailed information about specific products by
clicking their names, add products to the shopping cart, and see a quick
summary of what is in their cart. Clicking the summary navigates to the cart.
This is what the store view looks like:</p>

<p class=MsoNormal><img width=550 height=406 id="Picture 1"
src="ShoppingCart_files/image001.jpg"><b><br>
<br>
</b></p>

<p class=MsoNormal style='page-break-after:avoid'><b>Product Details:</b> This view
shows details about a product and allows users to add or remove the product
to/from the shopping cart. The view also presents a quick summary of the cart
so users can tell whether this product is already in the cart. This is what the
product details view looks like:</p>

<p class=MsoNormal><img width=550 height=406 id="Picture 2"
src="ShoppingCart_files/image002.jpg"><br>
<br>
</p>

<p class=MsoNormal style='page-break-after:avoid'><b>Shopping Cart</b>: This
view shows the shopping cart. Users can edit the cart and checkout using <b>PayPal</b>
or <b>Google Wallet</b>. Offering more payment options tends to increase sales,
because some users may have accounts with one service or the other. This is
what the shopping cart view looks like:</p>

<p class=MsoNormal><img width=550 height=406 id="Picture 3"
src="ShoppingCart_files/image003.jpg"><b><br>
<br>
</b></p>

<h2>AngularJS Infrastructure</h2>

<p class=MsoNormal>The sample application starts with the definition of an <b>AngularJS</b>
module that represents the application. The module <b>AngularStore</b> module is
defined in the <b>app.js</b> file as follows:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>// App Module: the name AngularStore matches the ng-app
attribute<br>
// in the main &lt;html&gt; tag. The route provides parses the URL and<br>
// injects the appropriate partial page<br>
</span><span style='font-size:9.5pt;font-family:Consolas;color:blue'>var</span><span
style='font-size:9.5pt;font-family:Consolas'> storeApp = angular.module(<span
style='color:maroon'>'AngularStore'</span>, []).<br>
  config([<span style='color:maroon'>'$routeProvider'</span>, <span
style='color:blue'>function</span>($routeProvider) {<br>
  $routeProvider.<br>
    when(<span style='color:maroon'>'/store'</span>, { <br>
      templateUrl: <span style='color:maroon'>'partials/store.htm'</span>,<br>
      controller: storeController })<br>
    when(<span style='color:maroon'>'/products/:productSku'</span>, {<br>
      templateUrl: <span style='color:maroon'>'partials/product.htm'</span>,<br>
      controller: storeController })<br>
    when(<span style='color:maroon'>'/cart'</span>, { <br>
      templateUrl: <span style='color:maroon'>'partials/shoppingCart.htm'</span>,<br>
      controller: storeController })<br>
    otherwise({<br>
      redirectTo: <span style='color:maroon'>'/store' </span>});<br>
}]);</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>This first block of code defines the <b>storeApp</b> object
that represents the application. It contains a <b>routeProvider</b> that
specifies which view should be displayed based on the URL. </p>

<p class=MsoNormal>For example, when the URL ends with “/cart”, the app should
display the view defined in the “partials/shoppingCart.htm” file. The view
should be bound to a controller of type “storeController”.</p>

<p class=MsoNormal>When the URL ends with “/product/:productSku”, the app
should display the view defined in the “partials/product.htm” file. The view
should be bound to a controller of the same type “storeController”. In this
case, the “/:productSku” represents a variable parameter used to identify the
product being shown. It will be replaced at runtime with an actual product
code.</p>

<p class=MsoNormal>In this case, all views have the same type of controller, a
class that contains a “store” and a “cart”.</p>

<p class=MsoNormal>Because in this case all views refer to the same store and
cart, it makes sense to create these data objects once, at the app level, and
allow all controllers to use them. This will improve performance because it
eliminates the need to re-load the store and cart items whenever a new view is
displayed.</p>

<p class=MsoNormal>The easiest way to share data between controllers in <b>AngularJS</b>
is by defining an app-level “service”, and later using this service to
initialize the controllers that need them. This links shows a simple example
that illustrates the concept: <a
href="http://egghead.io/video/angularjs-sharing-data-between-controllers/">http://egghead.io/video/angularjs-sharing-data-between-controllers/</a></p>

<p class=MsoNormal>Here is the definition of the “DataService” that provides
data shared by all views in the Angular Store application:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>// create a data service that provides a store and a shopping
cart that<br>
// will be shared by all views<br>
// (instead of creating fresh ones for each view).<br>
</span><span style='font-size:9.5pt;font-family:Consolas'>storeApp.factory(<span
style='color:maroon'>&quot;DataService&quot;</span>, <span style='color:blue'>function</span>
() {<br>
  <span style='color:blue'>var</span> myStore = <span style='color:blue'>new</span>
store();<br>
  <span style='color:blue'>var</span> myCart = <span style='color:blue'>new</span>
shoppingCart(<span style='color:maroon'>&quot;AngularStore&quot;</span>);<br>
  myCart.addCheckoutParameters(<span style='color:maroon'>&quot;PayPal&quot;</span>,
<span style='color:maroon'>&quot;<i>your PayPal merchant account id</i>&quot;</span>);<br>
  myCart.addCheckoutParameters(<span style='color:maroon'>&quot;Google&quot;</span>,
<span style='color:maroon'>&quot;<i>your Google merchant account id</i> &quot;</span>,<br>
</span><span style='font-size:9.5pt;font-family:Consolas'>  </span><span
style='font-size:9.5pt;font-family:Consolas'>  {<br>
    </span><span style='font-size:9.5pt;font-family:Consolas'>  </span><span
style='font-size:9.5pt;font-family:Consolas'>ship_method_name_1: <span
style='color:maroon'>&quot;UPS Next Day Air&quot;</span>,<br>
      ship_method_price_1: <span style='color:maroon'>&quot;20.00&quot;</span>,<br>
      ship_method_currency_1: <span style='color:maroon'>&quot;USD&quot;</span>,<br>
      ship_method_name_2: <span style='color:maroon'>&quot;UPS Ground&quot;</span>,<br>
      ship_method_price_2: <span style='color:maroon'>&quot;15.00&quot;</span>,<br>
      ship_method_currency_2: <span style='color:maroon'>&quot;USD&quot;<br>
</span>    });<br>
  <span style='color:blue'>return</span> {<br>
   store: myStore,<br>
   cart: myCart<br>
  };<br>
});</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The service creates a “store” object that contains a list of
the products available and a “shoppingCart” object that represents the shopping
cart.</p>

<p class=MsoNormal>When the “shoppingCart” object is created, it automatically
loads its contents from local storage, so users can add items to the cart,
close the application, and continue shopping later on.</p>

<p class=MsoNormal>After creating the cart, the service configures the cart’s
checkout parameters. In this example, the cart provides two checkout options:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'>1.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
“PayPal” option specifies the merchant account to use for checking out, and has
no additional options. To use the shopping cart with PayPal, you have to create
a merchant account with PayPal. You can do that here:<br>
<a href="https://www.paypal.com/webapps/mpp/merchant">https://www.paypal.com/webapps/mpp/merchant</a></p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'>2.<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
“Google” option specified the merchant account and additional options related
to shipping charges. To use the shopping cart with Google Wallet, you have to
create a merchant account with Google. You can do that here:<br>
<a
href="https://developers.google.com/commerce/wallet/digital/training/getting-started/merchant-setup">https://developers.google.com/commerce/wallet/digital/training/getting-started/merchant-setup</a></p>

<p class=MsoNormal>Once the data service has been created, it can be used by
the “storeController” objects that will drive all the views in the application.
This is done in the <b>controller.js</b> file:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>function</span><span style='font-size:9.5pt;font-family:Consolas'>
storeController($scope, $routeParams, DataService) {<br>
<br>
  <span style='color:darkgreen'>// get store and cart from service<br>
</span>  $scope.store = DataService.store;<br>
  $scope.cart = DataService.cart;<br>
<br>
  <span style='color:darkgreen'>// use routing to pick the selected product<br>
</span>  <span style='color:blue'>if</span> ($routeParams.productSku != <span
style='color:blue'>null</span>) {<br>
    $scope.product = $scope.store.getProduct($routeParams.productSku);<br>
  }<br>
}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The “storeController” function retrieves the store and cart
from the “DataService” discussed earlier and adds them to the AngularJS <b>$scope</b>
object. The <b>$scope</b> object works as a data context for the view.</p>

<p class=MsoNormal>The <b>app.js</b> and <b>controller.js</b> files contain all
the <b>AngularJS</b> part of the application code. The remaining classes (<b>store.js</b>,
<b>product.js</b>, and <b>shoppingCart.js</b>) are platform-agnostic.</p>

<h2>The ‘store’ and ‘product’ classes</h2>

<p class=MsoNormal>The ”store” class is defined in the <b>store.js</b> file.</p>

<p class=MsoNormal>It exposes a list of products and provides a <b>getProduct</b>
method that retrieves an individual product by SKU. This method is used by the
“storeController” to set the current product when the URL routing specifies a <b>productSku</b>.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>//----------------------------------------------------------------<br>
// store (contains the products)<br>
</span><span style='font-size:9.5pt;font-family:Consolas;color:blue'>function</span><span
style='font-size:9.5pt;font-family:Consolas'> store() {<br>
  <span style='color:blue'>this</span>.products = [<br>
    <span style='color:blue'>new</span> product(<span style='color:maroon'>&quot;APL&quot;</span>,
<span style='color:maroon'>&quot;Apple&quot;</span>, <span style='color:maroon'>&quot;Eat
one every…&quot;</span>, 12, 90, 0, 2, 0, 1, 2),</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas'>   
<span style='color:blue'>new</span> product(<span style='color:maroon'>&quot;AVC&quot;</span>,
<span style='color:maroon'>&quot;Avocado&quot;</span>, <span style='color:maroon'>&quot;Guacamole…&quot;</span>,
16, 90, 0, 1, 1, 1, 2),</span></p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas'>   
<span style='color:blue'>new</span> product(<span style='color:maroon'>&quot;BAN&quot;</span>,
<span style='color:maroon'>&quot;Banana&quot;</span>, <span style='color:maroon'>&quot;These
are…&quot;</span>, 4, 120, 0, 2, 1, 2, 2),<br>
    <span style='color:darkgreen'>// more products…</span><br>
    <span style='color:blue'>new</span> product(<span style='color:maroon'>&quot;WML&quot;</span>,
<span style='color:maroon'>&quot;Watermelon&quot;</span>, <span
style='color:maroon'>&quot;Nothing…&quot;</span>, 4, 90, 4, 4, 0, 1, 1)<br>
  ];<br>
  <span style='color:blue'>this</span>.dvaCaption = [<span style='color:maroon'>&quot;Negligible&quot;</span>,
<span style='color:maroon'>&quot;Low&quot;</span>, <span style='color:maroon'>&quot;Average&quot;</span>,
<span style='color:maroon'>&quot;Good&quot;</span>, <span style='color:maroon'>&quot;Great&quot;</span>
];<br>
  <span style='color:blue'>this</span>.dvaRange = [<span style='color:maroon'>&quot;below
5%&quot;</span>, <span style='color:maroon'>&quot;between 5 and 10%&quot;</span>,…
<span style='color:maroon'>&quot;above 40%&quot;</span>];<br>
}<br>
store.prototype.getProduct = <span style='color:blue'>function</span> (sku) {<br>
  <span style='color:blue'>for</span> (<span style='color:blue'>var</span> i =
0; i &lt; <span style='color:blue'>this</span>.products.length; i++) {<br>
    <span style='color:blue'>if</span> (<span style='color:blue'>this</span>.products[i].sku
== sku)<br>
      <span style='color:blue'>return</span> <span style='color:blue'>this</span>.products[i];<br>
  }<br>
  <span style='color:blue'>return</span> <span style='color:blue'>null</span>;<br>
}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The ”product” class is defined in the <b>product.js</b> file
as follows:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>//----------------------------------------------------------------<br>
// product class<br>
</span><span style='font-size:9.5pt;font-family:Consolas;color:blue'>function</span><span
style='font-size:9.5pt;font-family:Consolas'> product(sku, name, description,
price,<br>
                 cal, carot, vitc, folate, potassium, fiber) {<br>
  <span style='color:blue'>this</span>.sku = sku; <span style='color:darkgreen'>//
product code (SKU = stock keeping unit)<br>
</span>  <span style='color:blue'>this</span>.name = name;<br>
  <span style='color:blue'>this</span>.description = description;<br>
  <span style='color:blue'>this</span>.price = price;<br>
  <span style='color:blue'>this</span>.cal = cal;<br>
  <span style='color:blue'>this</span>.nutrients = {<br>
    <span style='color:maroon'>&quot;Carotenoid&quot;</span>: carot,<br>
    <span style='color:maroon'>&quot;Vitamin C&quot;</span>: vitc,<br>
    <span style='color:maroon'>&quot;Folates&quot;</span>: folate,<br>
    <span style='color:maroon'>&quot;Potassium&quot;</span>: potassium,<br>
    <span style='color:maroon'>&quot;Fiber&quot;</span>: fiber<br>
  };<br>
}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The product class has three properties that will be used by
the shopping cart: <b>sku</b> (unique ID), <b>name</b>, and <b>price</b>. All
other members are used elsewhere within the application, but not by the cart.</p>

<p class=MsoNormal>Decoupling the cart from the raw product class makes it
easier to integrate the cart with existing applications (which often already
have product classes generated automatically from databases).</p>

<h2>The ‘shoppingCart’ class</h2>

<p class=MsoNormal>The “shoppingCart” class is the most interesting class in
the project. It is defined in the <b>shoppingCart.js</b> file and implements an
object model as follows:</p>

<h3>shoppingCart(cartName)</h3>

<p class=MsoNormal>This is the constructor.</p>

<p class=MsoNormal>The <b>cartName</b> parameter identifies the cart when
saving it to or loading it from local storage. <br>
Before you can actually use the cart for checkout operations, you must
initialize it by adding one or more payment providers. This is done with the <b>addCheckoutParameters</b>
method.</p>

<h3>addCheckoutParameters(serviceName, merchantID, [options])</h3>

<p class=MsoNormal>This method defines a set of checkout parameters.</p>

<p class=MsoNormal>The <b>serviceName</b> parameter defines the name of the
payment provider to use. In the current implementation, this must be set to
either “PayPal” or “Google”.</p>

<p class=MsoNormal>The <b>merchantID</b> parameter specifies the merchant
account associated with the service. You can create PayPal and Google merchant
accounts using these links:<br>
<b>PayPal</b>: <a href="https://www.paypal.com/webapps/mpp/merchant">https://www.paypal.com/webapps/mpp/merchant</a><br>
<b>Google</b>: <a
href="https://developers.google.com/commerce/wallet/digital/training/getting-started/merchant-setup">https://developers.google.com/commerce/wallet/digital/training/getting-started/merchant-setup</a></p>

<h3>addItem(sku, name, price, quantity)</h3>

<p class=MsoNormal>This method adds or removes items from the cart.</p>

<p class=MsoNormal>If the cart already contains items with the given <b>sku</b>,
then the quantity of that item is modified. If the quantity reaches zero, the
item is automatically removed from the cart.</p>

<p class=MsoNormal>If the cart does not contain items with the given <b>sku</b>,
then a new item is created and added to the cart using the specified <b>sku</b>,
<b>name</b>, <b>price</b>, and <b>quantity</b>.</p>

<p class=MsoNormal>After the cart has been updated, it is automatically saved
to local storage.</p>

<h3>clearItems()</h3>

<p class=MsoNormal>This method clears the cart by removing all items. It also saves
the empty cart to local storage.</p>

<h3>getTotalCount([sku])</h3>

<p class=MsoNormal>This method gets the quantity of items or a given type or
for all items in the cart.</p>

<p class=MsoNormal>If the <b>sku</b> is provided, then the method returns the
quantity of items with that <b>sku</b>. It the <b>sku</b> is omitted, then the
method returns the quantity of all items in the cart.</p>

<h3>getTotalPrice([sku])</h3>

<p class=MsoNormal>This method gets the total price (unit price * quantity) for
one or all items in the cart.</p>

<p class=MsoNormal>If the <b>sku</b> is provided, then the method returns the
price of items with that <b>sku</b>. It the <b>sku</b> is omitted, then the
method returns the total price of all items in the cart.</p>

<h3>checkout([serviceName], [clearCart])</h3>

<p class=MsoNormal>This method initiates a checkout transaction by building a
form object and submitting it to the specified payment provider.</p>

<p class=MsoNormal>If provided, the <b>serviceName</b> parameter must match one
of the service names registered with calls to the <b>addCheckoutParameters</b>
method. If omitted, the cart will use the first payment service registered.<br>
The <b>clearCart</b> parameter specifies whether the cart should be cleared after
the <b>checkout</b> transaction is submitted.</p>

<p class=MsoNormal>The <b>checkout</b> method is the most interesting in this
class, and is listed below:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas'>shoppingCart.prototype.checkout
= <span style='color:blue'>function</span> (serviceName, clearCart) {<br>
<br>
<span style='color:darkgreen'>  // select service<br>
</span>  <span style='color:blue'>if</span> (serviceName == <span
style='color:blue'>null</span>) {<br>
    <span style='color:blue'>var</span> p = <span style='color:blue'>this</span>.checkoutParameters[Object.keys(<span
style='color:blue'>this</span>.checkoutParameters)[0]];<br>
    serviceName = p.serviceName;<br>
  }<br>
  <span style='color:blue'>if</span> (serviceName == <span style='color:blue'>null</span>)
{<br>
    <span style='color:blue'>throw</span> <span style='color:maroon'>&quot;Define
at least one checkout service.&quot;</span>;<br>
  }<br>
  <span style='color:blue'>var</span> parms = <span style='color:blue'>this</span>.checkoutParameters[serviceName];<br>
  <span style='color:blue'>if</span> (parms == <span style='color:blue'>null</span>)
{<br>
    <span style='color:blue'>throw</span> <span style='color:maroon'>&quot;Cannot
get checkout parameters for '&quot;</span> + serviceName + <span
style='color:maroon'>&quot;'.&quot;</span>;<br>
  }<br>
<span style='color:darkgreen'><br>
  // invoke service<br>
</span>  <span style='color:blue'>switch</span> (parms.serviceName) {<br>
    <span style='color:blue'>case</span> <span style='color:maroon'>&quot;PayPal&quot;</span>:<br>
      <span style='color:blue'>this</span>.checkoutPayPal(parms, clearCart);<br>
      <span style='color:blue'>break</span>;<br>
    <span style='color:blue'>case</span> <span style='color:maroon'>&quot;Google&quot;</span>:<br>
      <span style='color:blue'>this</span>.checkoutGoogle(parms, clearCart);<br>
      <span style='color:blue'>break</span>;<br>
    <span style='color:blue'>default</span>:<br>
      <span style='color:blue'>throw</span> <span style='color:maroon'>&quot;Unknown
checkout service: &quot;</span> + parms.serviceName;<br>
  }<br>
}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The method starts by making sure it has a valid payment
service, and then defers the actual work to the <b>checkoutPayPal</b> or <b>checkoutGoogle</b>
methods. These methods are very similar but are service-specific. The <b>checkoutPayPal</b>
method is implemented as follows:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>// check out using PayPal; for details see:<br>
// </span><a
href="http://www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside"><span
style='font-size:9.5pt;font-family:Consolas'>www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside</span></a><span
style='font-size:9.5pt;font-family:Consolas;color:darkgreen'><br>
</span><span style='font-size:9.5pt;font-family:Consolas'>shoppingCart.prototype.checkoutPayPal
= <span style='color:blue'>function</span> (parms, clearCart) {<br>
<br>
  <span style='color:darkgreen'>// global data<br>
</span>  <span style='color:blue'>var</span> data = {<br>
    cmd: <span style='color:maroon'>&quot;_cart&quot;</span>,<br>
    business: parms.merchantID,<br>
    upload: <span style='color:maroon'>&quot;1&quot;</span>,<br>
    rm: <span style='color:maroon'>&quot;2&quot;</span>,<br>
    charset: <span style='color:maroon'>&quot;utf-8&quot;<br>
</span>  };<br>
<br>
  <span style='color:darkgreen'>// item data<br>
</span>  <span style='color:blue'>for</span> (<span style='color:blue'>var</span>
i = 0; i &lt; <span style='color:blue'>this</span>.items.length; i++) {<br>
    <span style='color:blue'>var</span> item = <span style='color:blue'>this</span>.items[i];<br>
    <span style='color:blue'>var</span> ctr = i + 1;<br>
    data[<span style='color:maroon'>&quot;item_number_&quot;</span> + ctr] =
item.sku;<br>
    data[<span style='color:maroon'>&quot;item_name_&quot;</span> + ctr] =
item.name;<br>
    data[<span style='color:maroon'>&quot;quantity_&quot;</span> + ctr] = item.quantity;<br>
    data[<span style='color:maroon'>&quot;amount_&quot;</span> + ctr] =
item.price.toFixed(2);<br>
  }<br>
<br>
  <span style='color:darkgreen'>// build form<br>
</span>  <span style='color:blue'>var</span> form = $(<span style='color:maroon'>'&lt;form/&gt;&lt;/form&gt;'</span>);<br>
  form.attr(<span style='color:maroon'>&quot;action&quot;</span>, <span
style='color:maroon'>&quot;https://www.paypal.com/cgi-bin/webscr&quot;</span>);<br>
  form.attr(<span style='color:maroon'>&quot;method&quot;</span>, <span
style='color:maroon'>&quot;POST&quot;</span>);<br>
  form.attr(<span style='color:maroon'>&quot;style&quot;</span>, <span
style='color:maroon'>&quot;display:none;&quot;</span>);<br>
  <span style='color:blue'>this</span>.addFormFields(form, data);<br>
  <span style='color:blue'>this</span>.addFormFields(form, parms.options);<br>
  $(<span style='color:maroon'>&quot;body&quot;</span>).append(form);<br>
</span><span style='font-size:9.5pt;font-family:Consolas'><br>
</span><span style='font-size:9.5pt;font-family:Consolas'>  <span
style='color:darkgreen'>// submit form<br>
</span>  <span style='color:blue'>this</span>.clearCart = clearCart == <span
style='color:blue'>null</span> || clearCart;<br>
  form.submit();<br>
  form.remove();<br>
}</span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The <b>checkoutPayPal</b> method builds a form, populates it
with hidden input fields that contain the cart data, and submits the form to
the <b>PayPal</b> servers. The whole process is described here: <a
href="https://www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside">https://www.paypal.com/cgi-bin/webscr?cmd=p/pdn/howto_checkout-outside</a></p>

<p class=MsoNormal>The <b>checkoutGoogle</b> method is very similar. It also
builds and submits a form, the only difference being the name and content of
the fields. Details are available here: <a
href="https://developers.google.com/checkout/developer/Google_Checkout_Custom_Cart_How_To_HTML">https://developers.google.com/checkout/developer/Google_Checkout_Custom_Cart_How_To_HTML</a>.</p>

<p class=MsoNormal>Both checkout methods allow you to add custom fields specified
in the <b>options</b> parameter of the cart’s <b>addCheckoutParameters</b>
method. These custom fields can be used to specify things like return URLs,
custom images for the cart on the server’s site, custom shipping rules and
prices, etc.</p>

<p class=MsoNormal>When the <b>checkout</b> method submits the form, the user
is taken to the appropriate site (PayPal or Google Wallet), where he can review
the information about the items, update his own personal and credit card
information, and finalize the transaction. All this happens outside the scope
of the application. The payment provider will then use the information
associated with the merchant id provided by the form to notify you of the
transaction so you can collect the payment and ship the goods to the customer.</p>

<p class=MsoNormal>If you wanted to add more payment options to the cart, you
would have to:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Modify
the <b>addCheckoutParameters</b> method to accept the new service name.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Create
a new <b>checkout&lt;ServiceName&gt;</b> method to handle the checkouts using
the new service. This would probably be similar to the existing <b>checkoutPayPal</b>
and <b>checkoutGoogle</b> methods.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>Modify
the <b>checkout</b> method to call the new method depending on the service name
specified by the user.</p>

<p class=MsoNormal>For example, if you wanted to leverage an existing payment
infrastructure you have on your site, you could create a method similar to <b>checkoutPayPal</b>,
but with a URL on your site. The server would receive the form with all the
information encoded as hidden fields, and would have access to the current
session, user, etc. At this point, you would have all the information required
by your payment infrastructure (cart and user).</p>

<h2>AngularJS Views</h2>

<p class=MsoNormal>Now that we have covered the AngularJS infrastructure and
the controller classes, let’s turn our attention to the views.</p>

<p class=MsoNormal>The <b>default.htm</b> file contains the master view. It is
implemented as follows:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>&lt;!</span><span style='font-size:9.5pt;font-family:Consolas;
color:maroon'>doctype</span><span style='font-size:9.5pt;font-family:Consolas'>
<span style='color:red'>html</span><span style='color:blue'>&gt;<br>
<b>&lt;</b></span><b><span style='color:maroon'>html</span> <span
style='color:red'>ng-app</span><span style='color:blue'>=&quot;AngularStore&quot;&gt;<br>
</span></b>  <span style='color:blue'>&lt;</span><span style='color:maroon'>head</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:darkgreen'>&lt;!-- includes for jQuery, Angular,
and Bootstrap --&gt;<br>
</span>    <span style='color:darkgreen'>&lt;!-- … --&gt;<br>
</span>    <span style='color:darkgreen'>&lt;!-- includes for the Angular Store
app --&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>script</span>
<span style='color:red'>src</span><span style='color:blue'>=&quot;js/product.js&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/javascript&quot;&gt;&lt;/</span><span
style='color:maroon'>script</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>script</span>
<span style='color:red'>src</span><span style='color:blue'>=&quot;js/store.js&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/javascript&quot;&gt;&lt;/</span><span
style='color:maroon'>script</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>script</span>
<span style='color:red'>src</span><span style='color:blue'>=&quot;js/shoppingCart.js&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/javascript&quot;&gt;&lt;/</span><span
style='color:maroon'>script</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>script</span>
<span style='color:red'>src</span><span style='color:blue'>=&quot;js/app.js&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/javascript&quot;&gt;&lt;/</span><span
style='color:maroon'>script</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>script</span>
<span style='color:red'>src</span><span style='color:blue'>=&quot;js/controller.js&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/javascript&quot;&gt;&lt;/</span><span
style='color:maroon'>script</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>link</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;css/style.css&quot;</span>
<span style='color:red'>rel</span><span style='color:blue'>=&quot;stylesheet&quot;</span>
<span style='color:red'>type</span><span style='color:blue'>=&quot;text/css&quot;/&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>head</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>body</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>div</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;container-fluid&quot;&gt;<br>
</span>        <span style='color:blue'>&lt;</span><span style='color:maroon'>div</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;row-fluid&quot;&gt;<br>
</span>            <span style='color:blue'>&lt;</span><span style='color:maroon'>div</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;span10
offset1&quot;&gt;<br>
</span>                <span style='color:blue'>&lt;</span><span
style='color:maroon'>h1</span> <span style='color:red'>class</span><span
style='color:blue'>=&quot;well&quot;</span> <span style='color:blue'>&gt;<br>
</span>                    <span style='color:blue'>&lt;</span><span
style='color:maroon'>a</span> <span style='color:red'>href</span><span
style='color:blue'>=&quot;default.htm&quot;&gt;<br>
</span>                        <span style='color:blue'>&lt;</span><span
style='color:maroon'>img</span> <span style='color:red'>src</span><span
style='color:blue'>=&quot;img/logo.png&quot;</span> <span style='color:red'>height</span><span
style='color:blue'>=&quot;60&quot;</span> <span style='color:red'>width</span><span
style='color:blue'>=&quot;60&quot;</span> <span style='color:red'>alt</span><span
style='color:blue'>=&quot;logo&quot;/&gt;<br>
</span>                    <span style='color:blue'>&lt;/</span><span
style='color:maroon'>a</span><span style='color:blue'>&gt;<br>
</span>                    Angular Store<br>
                <span style='color:blue'>&lt;/</span><span style='color:maroon'>h1</span><span
style='color:blue'>&gt;<br>
</span><b>                <span style='color:blue'>&lt;</span><span
style='color:maroon'>div</span> <span style='color:red'>ng-view</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>div</span><span
style='color:blue'>&gt;<br>
</span></b>            <span style='color:blue'>&lt;/</span><span
style='color:maroon'>div</span><span style='color:blue'>&gt;<br>
</span>        <span style='color:blue'>&lt;/</span><span style='color:maroon'>div</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>div</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>body</span><span
style='color:blue'>&gt;<br>
&lt;/</span><span style='color:maroon'>html</span><span style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>Notice the following important points:</p>

<p class=MsoListParagraphCxSpFirst style='text-indent:-.25in'>1)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The <b>“ng-app”</b>
attribute associates the page with the <b>AngularStore</b> module defined in
the <b>app.js</b> file. This attribute takes care of the URL routing, view
injection, and providing each view with the appropriate controllers.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>2)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The <b>“ng-view”</b>
div marks the place where <b>AngularJS</b> will inject the partial pages that
correspond to the routed views. Recall that our application has three partial
pages: <b>store.htm</b>, <b>product.htm</b>, and <b>shoppingCart.htm</b>.</p>

<p class=MsoListParagraphCxSpMiddle style='text-indent:-.25in'>3)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
parts of the page around the <b>“ng-view”</b> div remain in place as you switch
views, acting as a master page. In this sample, this area shows the app logo
and a title.</p>

<p class=MsoListParagraphCxSpLast style='text-indent:-.25in'>4)<span
style='font:7.0pt "Times New Roman"'>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </span>The
sample application uses <b>Bootstrap</b>, twitter’s public framework that
includes powerful and easy to use css styles. Bootstrap makes it easy to create
adaptive layouts that work well on the desktop and on mobile devices (for
details, see <a href="http://twitter.github.io/bootstrap/">http://twitter.github.io/bootstrap/</a>).</p>

<p class=MsoNormal>The <b>store.htm</b> partial view is implemented as follows:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>&lt;</span><span style='font-size:9.5pt;font-family:Consolas;
color:maroon'>p</span><span style='font-size:9.5pt;font-family:Consolas'> <span
style='color:red'>class</span><span style='color:blue'>=&quot;text-info&quot;&gt;<br>
</span>  Welcome to the Angular Store<span style='color:blue'>&lt;</span><span
style='color:maroon'>br</span> <span style='color:blue'>/&gt;<br>
</span>  Please select the products you want ….<span style='color:blue'>&lt;</span><span
style='color:maroon'>br</span> <span style='color:blue'>/&gt;&lt;/</span><span
style='color:maroon'>p</span><span style='color:blue'>&gt;<br>
&lt;</span><span style='color:maroon'>p</span><span style='color:blue'>&gt;<br>
</span>  Search: <span style='color:blue'>&lt;</span><span style='color:maroon'>input</span>
<span style='color:red'>ng-model</span><span style='color:blue'>=&quot;search&quot;&gt;&lt;/</span><span
style='color:maroon'>p</span><span style='color:blue'>&gt;<br>
</span><br>
<span style='color:blue'>&lt;</span><span style='color:maroon'>table</span> <span
style='color:red'>class</span><span style='color:blue'>=&quot;table table-bordered&quot;&gt;<br>
</span><br>
  <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span> <span
style='color:red'>class</span><span style='color:blue'>=&quot;well&quot;&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;</span>
<span style='color:red'>colspan</span><span style='color:blue'>=&quot;4&quot;</span>
<span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>a</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;default.htm#/cart&quot;</span>
<span style='color:red'>title</span><span style='color:blue'>=&quot;go to
shopping cart&quot;</span><br>
         <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;&gt;<br>
</span>        <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-shopping-cart&quot;</span>
<span style='color:blue'>/&gt;<br>
</span>        <span style='color:blue'>&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>{{cart.getTotalCount()}}<span style='color:blue'>&lt;/</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span> items,<br>
        <span style='color:blue'>&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>{{cart.getTotalPrice() | currency}}<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;/</span><span style='color:maroon'>a</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span>
<span style='color:red'>ng-repeat</span><span style='color:blue'>=&quot;product
in store.products | orderBy:'name' | filter:search&quot;</span> <span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;&gt;<br>
      &lt;</span><span style='color:maroon'>img</span> <span style='color:red'>ng-src</span><span
style='color:blue'>=&quot;img/products/{{product.sku}}.jpg&quot;</span> <span
style='color:red'>alt</span><span style='color:blue'>=&quot;{{product.name}}&quot;</span>
<span style='color:blue'>/&gt;<br>
    &lt;/</span><span style='color:maroon'>td</span><span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>a</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;#/products/{{product.sku}}&quot;&gt;&lt;</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span>{{product.name}}<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>a</span><span
style='color:blue'>&gt;<br>
      &lt;</span><span style='color:maroon'>br</span> <span style='color:blue'>/&gt;</span>{{product.description}}<br>
    <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;&gt;<br>
</span>      {{product.price | currency}}<br>
    <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>a</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;&quot;</span>
<br>
       <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.addItem(product.sku,
product.name, product.price, 1)&quot;&gt;<br>
</span>         add to cart<br>
      <span style='color:blue'>&lt;/</span><span style='color:maroon'>a</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
</span><br>
  <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span> <span
style='color:red'>class</span><span style='color:blue'>=&quot;well&quot;&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;</span>
<span style='color:red'>colspan</span><span style='color:blue'>=&quot;4&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>a</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;default.htm#/cart&quot;</span>
<span style='color:red'>title</span><span style='color:blue'>=&quot;go to
shopping cart&quot;</span><br>
         <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;&gt;<br>
</span>         <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-shopping-cart&quot;</span>
<span style='color:blue'>/&gt;<br>
</span>         <span style='color:blue'>&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>{{cart.getTotalCount()}}<span style='color:blue'>&lt;/</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span> items,<br>
         <span style='color:blue'>&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>{{cart.getTotalPrice() | currency}}<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;/</span><span style='color:maroon'>a</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
&lt;/</span><span style='color:maroon'>table</span><span style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The view consists of a table with three regions: the first
row contains a single cell that spans the entire table and shows a summary of
the shopping cart. Notice how it uses the <b>getTotalCount</b> and <b>getTotalPrice</b>
methods to retrieve the cart information. Clicking this element redirects the
browser to “default.htm#/cart”, which shows the shopping cart.</p>

<p class=MsoNormal>The view uses <b>Bootstrap’s</b> built-in icons, in this
case the “icon-shopping-cart” class to enhance the view with simple and
attractive icons. <b>Bootstrap</b> includes a set of 140 icons that cover a lot
of common scenarios (see the complete list here: <a
href="http://twitter.github.io/bootstrap/base-css.html#icons">http://twitter.github.io/bootstrap/base-css.html#icons</a>).</p>

<p class=MsoNormal>The body of the table uses an <b>ng-repeat</b> attribute to
show a sorted, filtered list of all products. Each product row contains an
image, a description that is also a link to the product details view, the
product price, and a link that adds the product to the shopping cart. Adding
items to the cart is accomplished by using the <b>“ng-click”</b> attribute to invoke
the cart’s <b>addItem</b> method.</p>

<p class=MsoNormal>The “orderBy” and “filter” clauses are filters provided by <b>AngularJS</b>.
You can learn more about AngularJS filters here: <a
href="http://egghead.io/video/rough-draft-angularjs-built-in-filters/">http://egghead.io/video/rough-draft-angularjs-built-in-filters/</a></p>

<p class=MsoNormal>The last row is a copy of the first. It shows another
summary of the cart below the product list, making navigation easier in stores
that have a lot of products.</p>

<p class=MsoNormal>The <b>product.htm</b> partial view is very similar, so we
will not list it here.</p>

<p class=MsoNormal>The most interesting partial view is the shopping cart
itself, in <b>shoppingCart.htm</b>:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>&lt;</span><span style='font-size:9.5pt;font-family:Consolas;
color:maroon'>p</span><span style='font-size:9.5pt;font-family:Consolas'> <span
style='color:red'>class</span><span style='color:blue'>=&quot;text-info&quot;&gt;<br>
</span>  Thanks for shopping at the Angular Store.<span style='color:blue'>&lt;</span><span
style='color:maroon'>br</span> <span style='color:blue'>/&gt;<br>
</span>  This is your shopping cart. Here you can edit the items, <br>
  go back to the store, clear the cart, or check out.<span style='color:blue'>&lt;/</span><span
style='color:maroon'>p</span><span style='color:blue'>&gt;<br>
</span><br>
<span style='color:blue'>&lt;</span><span style='color:maroon'>div</span> <span
style='color:red'>class</span><span style='color:blue'>=&quot;container-fluid&quot;&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>div</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;row-fluid&quot;&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The first part of the view shows a title and sets up a <b>Bootstrap</b>
“fluid-row” div that will show two items: the cart items on the left and the
cart buttons on the right.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>&lt;!-- items --&gt;<br>
</span><span style='font-size:9.5pt;font-family:Consolas;color:blue'>&lt;</span><span
style='font-size:9.5pt;font-family:Consolas;color:maroon'>div</span><span
style='font-size:9.5pt;font-family:Consolas'> <span style='color:red'>class</span><span
style='color:blue'>=&quot;span8&quot;&gt;<br>
  &lt;</span><span style='color:maroon'>table</span> <span style='color:red'>class</span><span
style='color:blue'>=&quot;table table-bordered&quot;&gt;<br>
</span><br>
    <span style='color:darkgreen'>&lt;!-- header --&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;well&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>Item<span style='color:blue'>&lt;/</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;&lt;/</span><span
style='color:maroon'>td</span><span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;&gt;&lt;</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span>Quantity<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;&gt;&lt;</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span>Price<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:blue'>/&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
</span>  <br>
    <span style='color:darkgreen'>&lt;!-- empty cart message --&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span>
<span style='color:red'>ng-hide</span><span style='color:blue'>=&quot;cart.getTotalCount()
&gt; 0&quot;</span> <span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;</span>
<span style='color:red'>colspan</span><span style='color:blue'>=&quot;4&quot;&gt;</span>Your
cart is empty. <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
</span>  <br>
    <span style='color:darkgreen'>&lt;!-- cart items --&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span>
<span style='color:red'>ng-repeat</span><span style='color:blue'>=&quot;item in
cart.items | orderBy:'name'&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;</span>{{item.name}}<span style='color:blue'>&lt;/</span><span
style='color:maroon'>td</span><span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;&gt;<br>
</span>        <span style='color:blue'>&lt;</span><span style='color:maroon'>div</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;input-append&quot;&gt;<br>
</span>          <span style='color:darkgreen'>&lt;!-- use type=tel instead of 
to prevent spinners --&gt;<br>
</span>          <span style='color:blue'>&lt;</span><span style='color:maroon'>input<br>
</span>            <span style='color:red'>class</span><span style='color:blue'>=&quot;span3
text-center&quot;</span> <span style='color:red'>type</span><span
style='color:blue'>=&quot;tel&quot;</span> <br>
            <span style='color:red'>ng-model</span><span style='color:blue'>=&quot;item.quantity&quot;</span>
<span style='color:red'>ng-change</span><span style='color:blue'>=&quot;cart.saveItems()&quot;</span>
<span style='color:blue'>/&gt;<br>
</span>          <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
            <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-success&quot;</span> <span style='color:red'>type</span><span
style='color:blue'>=&quot;button&quot;</span> <br>
            <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;item.quantity
&gt;= 1000&quot;<br>
</span>            <span style='color:red'>ng-click</span><span
style='color:blue'>=&quot;cart.addItem(item.sku, item.name, item.price,
+1)&quot;&gt;</span>+<br>
          <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
</span>          <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
            <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-inverse&quot;</span> <span style='color:red'>type</span><span
style='color:blue'>=&quot;button&quot;</span> <br>
            <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;item.quantity
&lt;= 1&quot;<br>
</span>            <span style='color:red'>ng-click</span><span
style='color:blue'>=&quot;cart.addItem(item.sku, item.name, item.price,
-1)&quot;&gt;</span>-<br>
          <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
</span>        <span style='color:blue'>&lt;/</span><span style='color:maroon'>div</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;&gt;</span>{{item.price
* item.quantity | currency}}<span style='color:blue'>&lt;/</span><span
style='color:maroon'>td</span><span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;</span>
<span style='color:red'>title</span><span style='color:blue'>=&quot;remove from
cart&quot;&gt;<br>
</span>        <span style='color:blue'>&lt;</span><span style='color:maroon'>a</span>
<span style='color:red'>href</span><span style='color:blue'>=&quot;&quot;</span>
<span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.addItem(item.sku,
item.name, item.price, -10000000)&quot;</span> <span style='color:blue'>&gt;<br>
</span>          <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-remove&quot;</span>
<span style='color:blue'>/&gt;<br>
</span>        <span style='color:blue'>&lt;/</span><span style='color:maroon'>a</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
</span>  <br>
    <span style='color:darkgreen'>&lt;!-- footer --&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>tr</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;well&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;&lt;</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;</span>Total<span style='color:blue'>&lt;/</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;&lt;/</span><span
style='color:maroon'>td</span><span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdCenter&quot;&gt;&lt;</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span>{{cart.getTotalCount()}}<span
style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;tdRight&quot;&gt;&lt;</span><span
style='color:maroon'>b</span><span style='color:blue'>&gt;</span>{{cart.getTotalPrice()
| currency}}<span style='color:blue'>&lt;/</span><span style='color:maroon'>b</span><span
style='color:blue'>&gt;&lt;/</span><span style='color:maroon'>td</span><span
style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>td</span>
<span style='color:blue'>/&gt;<br>
</span>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>tr</span><span
style='color:blue'>&gt;<br>
  &lt;/</span><span style='color:maroon'>table</span><span style='color:blue'>&gt;<br>
&lt;/</span><span style='color:maroon'>div</span><span style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The items are shown in a “span8” div. Bootstrap layouts are
based on 12 width units, so this div will be approximately two-thirds of the
width available.</p>

<p class=MsoNormal>The table that contains the cart items starts with a header
row, followed by an empty cart indicator. The <b>“ng-hide”</b> attribute is
used to ensure the indicator is visible only when the cart is empty.</p>

<p class=MsoNormal>The body of the table is generated with an <b>“ng-repeat”</b>
attribute that loops through the items in the <b>cart.items</b> array. For each
item, the table shows the item name, followed the item quantity and price.</p>

<p class=MsoNormal>The item quantity is shown using a composite element made up
of an input field bound to the <b>item.quantity</b> property and two buttons
used to increment or decrement the quantity.</p>

<p class=MsoNormal>Notice how the <b>“ng-change”</b> attribute is used to save
the cart contents when the quantity changes. Notice also how the decrement
button is disabled when the item quantity reaches one. At this point,
decrementing the quantity would remove the item from the cart, and we don’t
want users to do that by accident.</p>

<p class=MsoNormal>After the quantity field, the table shows the total price of
the item (unit price times quantity) and a button that allows users to remove
the item from the cart.</p>

<p class=MsoNormal>The table footer shows a summary of the cart contents, and
is automatically updated as the user edits quantities or removes items from the
cart. The updates are handled automatically by AngularJS.</p>

<p class=MsoNormal>In addition to the cart items, the view has a section with
buttons used to return to the store, to clear the cart, and to check out:</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:darkgreen'>&lt;!-- buttons --&gt;<br>
</span><span style='font-size:9.5pt;font-family:Consolas;color:blue'>&lt;</span><span
style='font-size:9.5pt;font-family:Consolas;color:maroon'>div</span><span
style='font-size:9.5pt;font-family:Consolas'> <span style='color:red'>class</span><span
style='color:blue'>=&quot;span4&quot;&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>p</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;text-info&quot;&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
      <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block&quot;</span> <br>
      <span style='color:red'>onclick</span><span style='color:blue'>=&quot;window.location.href='default.htm'&quot;&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-chevron-left&quot;</span>
<span style='color:blue'>/&gt;</span> <b>back to store<br>
</b>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
      <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block btn-danger&quot;</span> <br>
      <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.clearItems()&quot;</span>
<br>
      <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;</span> <span style='color:blue'>&gt;<br>
</span>      <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-trash
icon-white&quot;</span> <span style='color:blue'>/&gt;</span> <b>clear cart<br>
</b>    <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>p</span><span
style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The section starts with a “span4” div which fills up the
page (remember the items were placed in a “span8” div).</p>

<p class=MsoNormal>The “back to store” button navigates back to the
“default.htm” page, which maps to the store.</p>

<p class=MsoNormal>The “clear cart” button invokes the cart’s <b>clearItems</b>
method, and is enabled only if the cart is not already empty.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>&lt;</span><span style='font-size:9.5pt;font-family:Consolas;
color:maroon'>p</span><span style='font-size:9.5pt;font-family:Consolas'> <span
style='color:red'>class</span><span style='color:blue'>=&quot;text-info&quot;&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>button<br>
</span>    <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block btn-primary&quot;<br>
</span>    <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.checkout('PayPal')&quot;<br>
</span>    <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-ok
icon-white&quot;</span> <span style='color:blue'>/&gt;</span> <b>check out
using PayPal<br>
</b>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
    <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block btn-primary&quot;</span> <br>
    <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.checkout('Google')&quot;</span>
<br>
    <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>i</span>
<span style='color:red'>class</span><span style='color:blue'>=&quot;icon-ok
icon-white&quot;</span> <span style='color:blue'>/&gt;</span> <b>check out
using Google<br>
</b>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;<br>
&lt;/</span><span style='color:maroon'>p</span><span style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>The checkout buttons call the cart’s <b>checkout</b> method
passing in the appropriate service name. Remember we configured the cart in the
<b>app.js</b> file to accept PayPal and Google as valid payment service
providers.</p>

<p class=MsoNormal style='margin-bottom:0in;margin-bottom:.0001pt;line-height:
normal;text-autospace:none'><span style='font-size:9.5pt;font-family:Consolas;
color:blue'>&lt;</span><span style='font-size:9.5pt;font-family:Consolas;
color:maroon'>p</span><span style='font-size:9.5pt;font-family:Consolas'> <span
style='color:red'>class</span><span style='color:blue'>=&quot;text-info&quot;&gt;<br>
</span>  <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span>
<br>
    <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block btn-link&quot;<br>
</span>    <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.checkout('PayPal')&quot;<br>
</span>    <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;</span> <span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>img</span><br>
      <span style='color:red'>src</span><span style='color:blue'>=</span></span><a
href="https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif"><span
style='font-size:9.5pt;font-family:Consolas'>https://www.paypal.com/en_US/i/btn/btn_xpressCheckout.gif</span></a><span
style='font-size:9.5pt;font-family:Consolas'><br>
      <span style='color:red'>alt</span><span style='color:blue'>=&quot;checkout
PayPal&quot;/&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;</span><br>
  <span style='color:blue'>&lt;</span><span style='color:maroon'>button</span> <br>
    <span style='color:red'>class</span><span style='color:blue'>=&quot;btn
btn-block btn-link&quot;</span> <br>
    <span style='color:red'>ng-click</span><span style='color:blue'>=&quot;cart.checkout('Google')&quot;</span>
<br>
    <span style='color:red'>ng-disabled</span><span style='color:blue'>=&quot;cart.getTotalCount()
&lt; 1&quot;</span> <span style='color:blue'>&gt;<br>
</span>    <span style='color:blue'>&lt;</span><span style='color:maroon'>img<br>
     </span> <span style='color:red'>src</span><span style='color:blue'>=</span></span><a
href="https://checkout.google.com/buttons/checkout.gif?...%20"><span
style='font-size:9.5pt;font-family:Consolas'>https://checkout.google.com/buttons/checkout.gif?...
</span></a><span style='font-size:9.5pt;font-family:Consolas'><br>
      <span style='color:red'>alt</span><span style='color:blue'>=&quot;checkoutGoogle&quot;/&gt;<br>
</span>  <span style='color:blue'>&lt;/</span><span style='color:maroon'>button</span><span
style='color:blue'>&gt;</span><br>
<span style='color:blue'>&lt;/</span><span style='color:maroon'>p</span><span
style='color:blue'>&gt;</span></span></p>

<p class=MsoNormal>&nbsp;</p>

<p class=MsoNormal>These buttons provides the same cart checkout services, but
use images provided by PayPal and Google. Personally, I think the provider
buttons may look a little less consistent on the page, but provide a familiar
feeling to the user.</p>

<p class=MsoNormal>The nice thing about <b>Bootstrap’s</b> layout mechanism is
that it is ‘adaptive’. If you view the page on mobile devices, the layout
automatically adapts to the screen width. The screenshots below illustrate
this. The image on the left shows a wide view, with buttons on the right of the
items (typical desktop view). The image on the right shows a narrow view, with
buttons below the items (typical mobile view).</p>

<p class=MsoNormal><img border=0 width=433 height=439 id="Picture 7"
src="ShoppingCart_files/image004.jpg">  <img border=0 width=259 height=439
id="Picture 6" src="ShoppingCart_files/image005.jpg"></p>

<h1>Conclusion</h1>

<p class=MsoNormal>The “shoppingCart” class presented here fulfills the
requirements outlined in the beginning of the article. It is 100% JavaScript,
and has no requirements on the server, so it should be easy to add to existing
projects. The cart supports <b>PayPal</b> and <b>Google Wallet</b>, which are
popular payment services. Many applications will probably want to extend this
to support their own custom payment services, and that should be relatively
easy to accommodate.</p>

<p class=MsoNormal>The MVVM pattern allows the same cart object to be exposed
in multiple views, which contain very simple markup and virtually no logic. The
sample application for example has a view that shows the whole cart, and allows
users to edit it; but it also shows cart summaries on the store and product
pages. These vires are easy to create and customize, and there is no impact on
the application logic.</p>

<p class=MsoNormal>I am a big fan of <b>AngularJS</b>. In addition to the MVVM
support it provides, which is great, it has an amazing list of features that
include routing and partial views, filters, custom directives, and more.</p>

<p class=MsoNormal>I especially like the fact that <b>AngularJS</b>’s data
binding features work with plain JavaScript objects. Some MVVM libraries (like <b>KnockoutJS</b>)
require special “observable” properties, which are declared and accessed using
a syntax that is different from plain properties.</p>

<p class=MsoNormal>The one aspect of <b>AngularJS</b> I do not like is the lack
of documentation. You can find a lot of information about the details of pretty
much any aspect of <b>AngularJS</b>, but I have not found a good reference that
presents an overall conceptual view of the framework. My favorite source of documentation
on AngularJS is a series of videos created by John Lindquist which you can find
here: <a href="http://www.youtube.com/user/johnlindquist">http://www.youtube.com/user/johnlindquist</a>.</p>

<p class=MsoNormal>I also like <b>Bootstrap</b>, because it makes it easy to
create attractive, responsive HTML layouts. In addition to a nice set of styles
and icons, <b>Bootstrap</b> also provides some JavaScript components that you
can use to enhance your UIs with things like tooltips, pop-overs, menus, etc.
You can learn about <b>Bootstrap</b> here: <a
href="http://twitter.github.io/bootstrap/">http://twitter.github.io/bootstrap/</a>.</p>

</div>

</body>

</html>
