// Be carefull to put cast (DECLFLAGS) on its defines otherwise the compiler
// will treat them as 32 bit values and ~,&, etc. won't operate on the upper 32 bits
typedef unsigned __int64 DECLFLAGS; 

/*****************************************************************************
;Macro Definitions
*****************************************************************************/

#define DECLF_NoFlags                   ((DECLFLAGS)0x0000000000000000)
#define DECLF_Private                   ((DECLFLAGS)0x0000000000000001)
#define DECLF_Protected                 ((DECLFLAGS)0x0000000000000002)
#define DECLF_Public                    ((DECLFLAGS)0x0000000000000004)
#define DECLF_Friend                    ((DECLFLAGS)0x0000000000000008)
#define DECLF_NotOverridable            ((DECLFLAGS)0x0000000000000010)
#define DECLF_MustOverride              ((DECLFLAGS)0x0000000000000020)
#define DECLF_Static                    ((DECLFLAGS)0x0000000000000040)
#define DECLF_Shared                    ((DECLFLAGS)0x0000000000000080)
#define DECLF_OverloadsKeywordUsed      ((DECLFLAGS)0x0000000000000100)
#define DECLF_OverridesKeywordUsed      ((DECLFLAGS)0x0000000000000200)
#define DECLF_Const                     ((DECLFLAGS)0x0000000000000400)
#define DECLF_Dim                       ((DECLFLAGS)0x0000000000000800)
#define DECLF_WithEvents                ((DECLFLAGS)0x0000000000001000)
#define DECLF_New                       ((DECLFLAGS)0x0000000000002000) // Declared with New (e.g., "Dim x As New Foo")
#define DECLF_Value                     ((DECLFLAGS)0x0000000000004000) // Denotes a Value for conditional compilation constant
#define DECLF_Bracketed                 ((DECLFLAGS)0x0000000000008000)
#define DECLF_AllowOptional             ((DECLFLAGS)0x0000000000010000) // Allow Optional and ParamArray parameters in the declaration
#define DECLF_Hidden                    ((DECLFLAGS)0x0000000000020000) // Synthetically generated by the compiler
#define DECLF_Function                  ((DECLFLAGS)0x0000000000040000)
#define DECLF_PropGet                   ((DECLFLAGS)0x0000000000080000)
#define DECLF_PropSet                   ((DECLFLAGS)0x0000000000100000)
#define DECLF_MustInherit               ((DECLFLAGS)0x0000000000200000)
#define DECLF_Overridable               ((DECLFLAGS)0x0000000000400000)
#define DECLF_HasRetval                 ((DECLFLAGS)0x0000000000800000)
#define DECLF_DisallowByref             ((DECLFLAGS)0x0000000001000000)
#define DECLF_Default                   ((DECLFLAGS)0x0000000002000000)
#define DECLF_Constructor               ((DECLFLAGS)0x0000000004000000)
#define DECLF_Unicode                   ((DECLFLAGS)0x0000000008000000)
#define DECLF_Ansi                      ((DECLFLAGS)0x0000000010000000)
#define DECLF_Auto                      ((DECLFLAGS)0x0000000020000000)
#define DECLF_SpecialName               ((DECLFLAGS)0x0000000040000000)
#define DECLF_AllowDupParam             ((DECLFLAGS)0x0000000080000000) // Allow parameter names to be the same or to match the proc name
#define DECLF_Implementing              ((DECLFLAGS)0x0000000100000000)
#define DECLF_ReadOnly                  ((DECLFLAGS)0x0000000200000000)
#define DECLF_WriteOnly                 ((DECLFLAGS)0x0000000400000000)
#define DECLF_ProtectedFriend           ((DECLFLAGS)0x0000000800000000)
#define DECLF_NotInheritable            ((DECLFLAGS)0x0000001000000000)
#define DECLF_NotTyped                  ((DECLFLAGS)0x0000004000000000) // The variable was declared with no type and no type character
#define DECLF_NotDecled                 ((DECLFLAGS)0x0000008000000000)
#define DECLF_Structure                 ((DECLFLAGS)0x0000010000000000) // Whether this is a Structure
#define DECLF_HasMustOverrideMethod     ((DECLFLAGS)0x0000020000000000) // A class has at least one method marked as MustOverride
#define DECLF_Module                    ((DECLFLAGS)0x0000040000000000) // Whether this is a Std. Module
#define DECLF_ShadowsKeywordUsed        ((DECLFLAGS)0x0000080000000000) // Shadows by name ,e.g. Shadows foo() hides foo() and foo(x as integer)
#define DECLF_Delegate                  ((DECLFLAGS)0x0000100000000000) // Whether this is a Delegate
#define DECLF_Enum                      ((DECLFLAGS)0x0000200000000000) // Whether this is an Enum
#define DECLF_ImplementionNotRequired   ((DECLFLAGS)0x0000400000000000) // That this method, which is found on an interface, doesn't require implementation when the interface is implemented
#define DECLF_LocalInUsingReadOnly      ((DECLFLAGS)0x0000800000000000) // Local control variable of a 'Using' It is read only
#define DECLF_Partial                   ((DECLFLAGS)0x0001000000000000) // whether this type is partial
#define DECLF_Widening                  ((DECLFLAGS)0x0002000000000000) // widening specifier is used
#define DECLF_Narrowing                 ((DECLFLAGS)0x0004000000000000) // narrowing specifier is used
#define DECLF_MyGroupGenerated          ((DECLFLAGS)0x0008000000000000) // synthetic member generated by MyGroup
#define DECLF_EventAddMethod            ((DECLFLAGS)0x0010000000000000) // synthetic or user defined AddHandler method associated with an Event
#define DECLF_EventRemoveMethod         ((DECLFLAGS)0x0020000000000000) // synthetic or user defined RemoveHandler method associated with an Event
#define DECLF_EventFireMethod           ((DECLFLAGS)0x0040000000000000) // user defined RaiseEvent method associated with an Event
#define DECLF_CompilerControlled        ((DECLFLAGS)0x0080000000000000) // privatescope/compilercontrolled visibility for synthetic members
#define DECLF_Anonymous                 ((DECLFLAGS)0x0100000000000000)
#define DECLF_AllowParamTypingInconsistency    ((DECLFLAGS)0x0200000000000000) // allow some parameters to have type specified, but not all
#define DECLF_LambdaArguments           ((DECLFLAGS)0x0400000000000000)
#define DECLF_AutoProperty              ((DECLFLAGS)0x0800000000000000)
#define DECLF_Async                     ((DECLFLAGS)0x1000000000000000)
#define DECLF_Iterator                  ((DECLFLAGS)0x2000000000000000)

// Groups
#define DECLF_AccessFlags ((DECLFLAGS)( DECLF_Private | DECLF_Protected | DECLF_Public | DECLF_Friend | DECLF_ProtectedFriend | DECLF_CompilerControlled ))
#define DECLF_InvokeFlags ((DECLFLAGS)( DECLF_Function | DECLF_PropGet | DECLF_PropSet ))

/* Bit masks for testing declaration modifier correctness
    Masks that specify what is legal.  It is preferable to define these kinds of masks so that as new modifiers
    are added that aren't legal, they automatically get detected by comparisons against a validity mask */

#define DECLF_ValidVarFlags ((DECLFLAGS)( DECLF_AccessFlags | DECLF_Shared | DECLF_Hidden | DECLF_SpecialName | DECLF_ReadOnly | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidConstFlags ((DECLFLAGS)( DECLF_AccessFlags | DECLF_Hidden | DECLF_Const | DECLF_Value | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidWithEventsFlags ((DECLFLAGS)( DECLF_ValidVarFlags | DECLF_Dim | DECLF_WithEvents | DECLF_ShadowsKeywordUsed | DECLF_New ) & (DECLFLAGS)~DECLF_ReadOnly )
#define DECLF_ValidLocalConstFlags ((DECLFLAGS)( DECLF_Const | DECLF_Value | DECLF_Hidden ))
#define DECLF_ValidLocalDimFlags ((DECLFLAGS)( DECLF_Dim | DECLF_New | DECLF_Hidden | DECLF_Static | DECLF_LocalInUsingReadOnly ))
#define DECLF_ValidMethodFlags ((DECLFLAGS)( DECLF_AccessFlags | DECLF_InvokeFlags | DECLF_NotOverridable | DECLF_Overridable | DECLF_MustOverride | DECLF_Shared | DECLF_OverloadsKeywordUsed | DECLF_OverridesKeywordUsed | DECLF_AllowOptional | DECLF_Hidden | DECLF_HasRetval | DECLF_AllowDupParam | DECLF_SpecialName | DECLF_ShadowsKeywordUsed | DECLF_DisallowByref | DECLF_Partial | DECLF_Async | DECLF_Iterator ))
#define DECLF_ValidInterfaceMethodFlags ((DECLFLAGS)( DECLF_InvokeFlags | DECLF_OverloadsKeywordUsed | DECLF_AllowOptional | DECLF_HasRetval | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidEventFlags ((DECLFLAGS)( DECLF_Public | DECLF_Protected | DECLF_Friend | DECLF_ProtectedFriend | DECLF_Private | DECLF_Function | DECLF_Hidden | DECLF_AllowDupParam | DECLF_Shared | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidDeclareFlags ((DECLFLAGS)( DECLF_OverloadsKeywordUsed | DECLF_InvokeFlags | DECLF_Private | DECLF_Protected | DECLF_Public | DECLF_Friend | DECLF_ProtectedFriend | DECLF_Hidden | DECLF_HasRetval | DECLF_Unicode | DECLF_Ansi | DECLF_Auto | DECLF_AllowOptional | DECLF_AllowDupParam | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidDelegateFlags ((DECLFLAGS)( DECLF_AccessFlags | DECLF_Function | DECLF_HasRetval | DECLF_Hidden | DECLF_AllowDupParam | DECLF_ShadowsKeywordUsed ))
#define DECLF_ValidOperatorFlags ((DECLFLAGS)( DECLF_Public | DECLF_Function | DECLF_Shared | DECLF_OverloadsKeywordUsed | DECLF_Hidden | DECLF_HasRetval | DECLF_AllowDupParam | DECLF_SpecialName | DECLF_ShadowsKeywordUsed | DECLF_DisallowByref | DECLF_Widening | DECLF_Narrowing ))
#define DECLF_ValidGeneralDeclFlags ((DECLFLAGS)( DECLF_ValidVarFlags | DECLF_Dim | DECLF_New | DECLF_ShadowsKeywordUsed ))
    // Masks that test for specific invalid specifiers
#define DECLF_InvalidFlagsOnShared              ((DECLFLAGS)( DECLF_OverridesKeywordUsed | DECLF_Overridable | DECLF_NotOverridable | DECLF_MustOverride | DECLF_Default )) // #38502 - no protected on stuff marked as shared
#define DECLF_InvalidFlagsOnDefault             ((DECLFLAGS)( DECLF_Private | DECLF_Shared ))
#define DECLF_InvalidStdModuleMemberFlags       ((DECLFLAGS)( DECLF_Protected | DECLF_ProtectedFriend | DECLF_Shared | DECLF_Default | DECLF_MustOverride | DECLF_Overridable | DECLF_ShadowsKeywordUsed | DECLF_OverridesKeywordUsed ))
#define DECLF_InvalidFlagsInNotInheritableClass ((DECLFLAGS)( DECLF_Protected | DECLF_ProtectedFriend | DECLF_Overridable | DECLF_NotOverridable | DECLF_MustOverride ))
#define DECLF_InvalidInterfaceMemberFlags       ((DECLFLAGS)( DECLF_AccessFlags | DECLF_Shared | DECLF_Friend | DECLF_MustOverride | DECLF_Overridable | DECLF_OverridesKeywordUsed )) // [....]: fixit Can remove DECLF_Friend because it is in DECLF_AccessFlags

// When updating this flag set, make sure to also update Symbols::CalculateInitialParamFlags.  If adding a
// new flag, update Symbols::GetParam as well
typedef unsigned PARAMFLAGS;

#define PARAMF_ByVal            0x00000001
#define PARAMF_ByRef            0x00000002
#define PARAMF_ParamArray       0x00000004
#define PARAMF_Optional         0x00000008
#define PARAMF_MarshalAsObject  0x00000010

typedef unsigned OPTION_FLAGS;

#define OPTION_OptionExplicit   0x00000010
#define OPTION_OptionStrict     0x00000020
#define OPTION_OptionText       0x00000040
#define OPTION_OptionInfer      0x00000080
