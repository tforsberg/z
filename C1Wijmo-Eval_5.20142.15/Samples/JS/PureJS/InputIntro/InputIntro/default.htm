<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Input Introduction</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <!-- styles -->
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
    <link rel="stylesheet" href="//maxcdn.bootstrapcdn.com/font-awesome/4.1.0/css/font-awesome.min.css">
    <link href="styles/vendor/wijmo.min.css" rel="stylesheet">
    <link rel="stylesheet" href="styles/app.css">

    <!-- jQuery/Angular/Bootstrap -->
    <script src="http://code.jquery.com/jquery-2.0.0.min.js" type="text/javascript"></script>
    <script src="https://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js" type="text/javascript"></script>

    <!-- Wijmo -->
    <script src="scripts/vendor/wijmo.min.js" type="text/javascript"></script>
    <script src="scripts/vendor/wijmo.input.min.js" type="text/javascript"></script>
</head>
<body>
    <div class="header">
        <div class="container">
            <img src="resources/wijmo5.png">
            <h1>Input 101</h1>
            <p>
                This page shows how to get started with Wijmo's Input controls.
            </p>
        </div>
    </div>
    <div class="container">

        <!-- Getting Started -->
        <div>
            <h2>Getting Started</h2>
            <p>
                Steps for getting started with Input controls in JavaScript applications:
            </p>
            <ol>
                <li>Add references to jQuery and Wijmo.</li>
                <li>Add markup to serve as the Wijmo control's host.</li>
                <li>Initialize the Wijmo control(s) via JavaScript.</li>
                <li>(Optional) Add some CSS to customize the input control's appearance.</li>
            </ol>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#gsHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#gsJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="gsHtml">
&lt;!DOCTYPE html&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/bootstrap.css"/&gt;
  &lt;link rel="stylesheet" type="text/css" href="css/wijmo.css" /&gt;
  &lt;link href="css/app.css" rel="stylesheet" type="text/css" /&gt;
  &lt;script src="scripts/jquery.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/bootstrap.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.input.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.grid.js" type="text/javascript"&gt;&lt;/script&gt;
  &lt;script src="scripts/wijmo.chart.js" type="text/javascript"&gt;&lt;/script&gt;  
  &lt;script src="scripts/app.js" type="text/javascript"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;  
  &lt;input id="gsInputNumber" type="text" /&gt;
&lt;/body&gt;
&lt;/html&gt;
                            </div>
                            <div class="tab-pane pane-content" id="gsJs">
var inputNumber = new wijmo.input.InputNumber('#gsInputNumber');
inputNumber.value = 3.5;
inputNumber.step = 0.5;
inputNumber.format = 'n';
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <input id="gsInputNumber" type="text">
                </div>
            </div>
        </div>

        <!-- AutoComplete -->
        <div>
            <h2>AutoComplete</h2>
            <p>
                The AutoComplete control is an auto-complete control that allows you to filter its
                item list as you type, as well as select a value directly from its drop-down list.
            </p>
            <p>
                To use the AutoComplete control, you must minimally set the <b>itemsSource</b>
                property to an array of data in order to populate its item list. The AutoComplete
                control also offers several other properties to alter its behavior, such as the
                <b>cssMatch</b> property. The <b>cssMatch</b> property allows you to specify the CSS
                class that is used to highlight parts of the content that match your search terms.
            </p>
            <p>
                The example below uses an array of strings to populate the AutoComplete control's
                item list using the <b>itemsSource</b> property. To see a list of suggestions, type
                <b>"ab"</b> or <b>"za"</b> in the AutoComplete controls below.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#acHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#acJs" role="tab" data-toggle="tab">JS</a></li>
                            <li><a href="#acCss" role="tab" data-toggle="tab">CSS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="acHtml">
&lt;div&gt;
  &lt;label&gt;itemsSource Only&lt;/label&gt;
  &lt;div id="acAutoComplete1"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;itemsSource &amp;amp; cssMatch&lt;/label&gt;
  &lt;div id="acAutoComplete2"&gt;&lt;/div&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="acJs">
var autoComplete1 = new wijmo.input.AutoComplete('#acAutoComplete1');
var autoComplete2 = new wijmo.input.AutoComplete('#acAutoComplete2');

autoComplete1.itemsSource = data.countries;

autoComplete2.itemsSource = data.countries;
autoComplete2.cssMatch = 'highlight';   // CSS class for custom highlighting
                            </div>
                            <div class="tab-pane pane-content" id="acCss">
.highlight {
  background-color: #ff0;
  color: #000;
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>itemsSource Only</label>
                        <div id="acAutoComplete1"></div>
                    </div>
                    <div class="app-input-group">
                        <label>itemsSource &amp; cssMatch</label>
                        <div id="acAutoComplete2"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- ComboBox -->
        <div>
            <h2>ComboBox</h2>
            <p>
                The ComboBox control is very similar to the AutoComplete control, but rather than
                providing a list of suggestions as you type, the ComboBox will automatically complete
                and select the entry as you type.
            </p>
            <p>
                Like the AutoComplete control, you must minimally set the ComboBox's <b>itemsSource</b>
                property to an array of data in order to populate its item list. You may also want to
                specify whether the ComboBox is editable via the <b>isEditable</b> property. The
                <b>isEditable</b> property determines whether or not a user can enter values that do
                not appear in the ComboBox's item list.
            </p>
            <p>
                The example below uses two ComboBoxes bound to the same data source as the AutoComplete
                control above. The first ComboBox's <b>isEditable</b> property is set to false, while the
                second ComboBox's <b>isEditable</b> property is set to true.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#cbHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#cbJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="cbHtml">
&lt;div&gt;
  &lt;label&gt;Non-Editable&lt;/label&gt;
  &lt;div id="cbComboBox1"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Editable&lt;/label&gt;
  &lt;div id="cbComboBox2"&gt;&lt;/div&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="cbJs">
var comboBox1 = new wijmo.input.ComboBox('#cbComboBox1');
var comboBox2 = new wijmo.input.ComboBox('#cbComboBox2');

comboBox1.itemsSource = data.countries;
comboBox1.isEditable = false;

comboBox2.itemsSource = data.countries;
comboBox2.isEditable = true;
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Non-Editable</label>
                        <div id="cbComboBox1"></div>
                    </div>
                    <div class="app-input-group">
                        <label>Editable</label>
                        <div id="cbComboBox2"></div>
                    </div>
                </div>
            </div>
        </div>

        <!-- InputDate and Calendar -->
        <div>
            <h2>InputDate &amp; Calendar</h2>
            <p>
                The InputDate control allows you to edit and select dates via a drop-down calendar,
                preventing you from entering an incorrect value. The InputDate's drop-down calendar
                was developed as a separate control and can be used be used independently
                from the InputDate control.
            </p>
            <p>
                Both InputDate and Calendar, specify several properties to alter the controls' behavior.
                The most commonly used properties include:
            </p>
            <ul>
                <li>
                    <b>value</b>: Specifies the date value for the control.
                </li>
                <li>
                    <b>min</b>: Specifies the minimum date value that can be entered in the control.
                </li>
                <li>
                    <b>max</b>: Specifies the maximum date value that can be entered in the control.
                </li>
            </ul>
            <p>
                The example below demonstrates how to use each of these properties.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#idcHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#idcJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="idcHtml">
&lt;div&gt;
  &lt;label&gt;Bound InputDate with min &amp;amp; max&lt;/label&gt;
  &lt;input id="idcInputDate" type="text" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Bound Calendar with min &amp;amp; max&lt;/label&gt;
  &lt;input id="idcCalendar" type="text" style="width:300px;" /&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;b&gt;Valid Range: &lt;span id="idcMinDate"&gt;&lt;/span&gt; to &lt;span id="idcMaxDate"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
                            </div>
                            <div class="tab-pane pane-content" id="idcJs">
var inputDate = new wijmo.input.InputDate('#idcInputDate');
var calendar = new wijmo.input.Calendar('#idcCalendar');
var today = new Date();
var minDate = new Date(today.getFullYear(), 0, 1);
var maxDate = new Date(today.getFullYear(), 11, 31);
var format = 'MMM d, yyyy';

inputDate.value = today;
inputDate.min = minDate;
inputDate.max = maxDate;

calendar.value = today;
calendar.min = minDate;
calendar.max = maxDate;

// set current date range values below the example
$('#idcMinDate').text(wijmo.Globalize.format(minDate, format));
$('#idcMaxDate').text(wijmo.Globalize.format(maxDate, format));
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Bound InputDate with min &amp; max</label>
                        <input id="idcInputDate" type="text">
                    </div>
                    <div class="app-input-group">
                        <label>Bound Calendar with min &amp; max</label>
                        <input id="idcCalendar" type="text" style="width:300px;">
                    </div>
                    <p>
                        <b>Valid Range: <span id="idcMinDate"></span> to <span id="idcMaxDate"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- InputDate and InputTime -->
        <div>
            <h2>InputDate &amp; InputTime</h2>
            <p>
                Similar to the InputDate control, the InputTime control allows you to modify the time portion of
                a JavaScript date. The InputTime control shares many of the same properties as the InputDate control,
                including <b>format</b>, <b>min</b>, <b>max</b>, and <b>value</b>. The InputTime control also offers a
                <b>step</b> property that allows you to specify the number of minutes between entries in its drop-down
                list.
            </p>
            <p>
                The example below illustrates how to use the InputTime control in conjunction with the InputDate
                control. Notice that these controls work together to edit the same DateTime JavaScript Object
                and only update the part of the DateTime that they are responsible for.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#iditHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#iditJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="iditHtml">
&lt;div&gt;
  &lt;label&gt;Bound InputDate with min, max, &amp;amp; format&lt;/label&gt;
  &lt;input id="iditInputDate" type="text" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Bound InputTime with min, max, &amp;amp; step&lt;/label&gt;
  &lt;input id="iditInputTime" type="text" /&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="iditJs">
var inputDate = new wijmo.input.InputDate('#iditInputDate');
var inputTime = new wijmo.input.InputTime('#iditInputTime');
var today = new Date();
var minDate = new Date(today.getFullYear(), 0, 1);
var maxDate = new Date(today.getFullYear(), 11, 31);
var minTime = new Date(0, 0, 0, 7, 0, 0, 0);
var maxTime = new Date(0, 0, 0, 19, 0, 0, 0);

inputTime.valueChanged.addHandler(valueChanged);
inputDate.valueChanged.addHandler(valueChanged);

inputDate.value = today;
inputDate.min = minDate;
inputDate.max = maxDate;
inputDate.format = 'MMM dd, yyyy';

inputTime.value = today;
inputTime.min = minTime;
inputTime.max = maxTime;
inputTime.step = 15;

// valueChanged event handler
function valueChanged() {

  // get new date from the two controls using Wijmo utility functions
  var val = wijmo.DateTime.fromDateTime(inputDate.value, inputTime.value);
  
  // format and display the new date
  $('#iditSelectedValue').text(wijmo.Globalize.format(val, 'MMM dd, yyyy h:mm:ss tt'));
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Bound InputDate with min, max, &amp; format</label>
                        <input id="iditInputDate" type="text">
                    </div>
                    <div class="app-input-group">
                        <label>Bound InputTime with min, max, &amp; step</label>
                        <input id="iditInputTime" type="text">
                    </div>
                    <p>
                        <b>Selected Date &amp; Time: <span id="iditSelectedValue"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- ListBox -->
        <div>
            <h2>ListBox</h2>
            <p>
                The ListBox control displays a list of items and allows you to select items using your
                mouse and keyboard. Like the AutoComplete and ComboBox controls, you must specify the
                ListBox's <b>itemsSource</b> property in order to use the control.
            </p>
            <p>
                The example below allows you to select an item within the ListBox control, and also displays
                the control's <b>selectedIndex</b> and <b>selectedValue</b> properties.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#lbHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#lbJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="lbHtml">
&lt;div&gt;
  &lt;div id="lbListBox" style="height:150px;width:250px;"&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
  &lt;b&gt;selectedIndex: &lt;span id="lbSelIdx"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
&lt;p&gt;
  &lt;b&gt;selectedValue: &lt;span id="lbSelVal"&gt;&lt;/span&gt;&lt;/b&gt;
&lt;/p&gt;
                            </div>
                            <div class="tab-pane pane-content" id="lbJs">
var listBox = new wijmo.input.ListBox('#lbListBox');
listBox.selectedIndexChanged.addHandler(selectedIndexChanged);
listBox.itemsSource = data.cities;

// selectedIndexChanged event handler
function selectedIndexChanged(sender) {

  // set selectedIndex and selectedValue text
  $('#lbSelIdx').text(sender.selectedIndex);
  $('#lbSelVal').text(sender.selectedValue);
}
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <div id="lbListBox" style="height:150px;width:250px;"></div>
                    </div>
                    <p>
                        <b>selectedIndex: <span id="lbSelIdx"></span></b>
                    </p>
                    <p>
                        <b>selectedValue: <span id="lbSelVal"></span></b>
                    </p>
                </div>
            </div>
        </div>

        <!-- InputNumber -->
        <div>
            <h2>InputNumber</h2>
            <p>
                The InputNumber control allows you to edit numbers, preventing you from entering invalid
                data and optionally formatting the numeric value as it is edited. The InputNumber can be
                used without specifying any of its properties; however, you'll typically want to bind it
                to some data using the <b>value</b> property.
            </p>
            <p>
                In addition to the <b>value</b> property, the InputNumber control offers several other
                properties that can be used to alter its behavior, such as:
            </p>
            <ul>
                <li>
                    <b>min</b>: Specifies the minimum numeric value that can be entered.
                </li>
                <li>
                    <b>max</b>: Specifies the maximum numeric value that can be entered.
                </li>
                <li>
                    <b>step</b>: Specifies the amount to add or subtract from the current
                    value when the spinner buttons are clicked.
                </li>
                <li>
                    <b>format</b>: Specifies the numeric format used to display the number being
                    edited. The format property uses a .NET-style
                    <a href="http://msdn.microsoft.com/en-us/library/dwhawy9k(v=vs.110).aspx" target="_blank">numeric format string</a>.
                </li>
            </ul>
            <p>
                The example below demonstrates how to use all of these properties.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#inHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#inJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="inHtml">
&lt;div&gt;
  &lt;label&gt;Unbound with "n0" format&lt;/label&gt;
  &lt;input id="inInputNumber1" type="text" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Bound with "n" format&lt;/label&gt;
  &lt;input id="inInputNumber2" type="text" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Bound with min (0), max (10), step, and "c2" format&lt;/label&gt;
  &lt;input id="inInputNumber3" type="text" /&gt;
&lt;/div&gt;
&lt;div&gt;
  &lt;label&gt;Unbound with placeholder and required="false"&lt;/label&gt;
  &lt;input id="inInputNumber4" type="text" /&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="inJs">
var inputNumber1 = new wijmo.input.InputNumber('#inInputNumber1');
var inputNumber2 = new wijmo.input.InputNumber('#inInputNumber2');
var inputNumber3 = new wijmo.input.InputNumber('#inInputNumber3');
var inputNumber4 = new wijmo.input.InputNumber('#inInputNumber4');

inputNumber1.value = 0;
inputNumber1.format = 'n0';

inputNumber2.value = Math.PI;
inputNumber2.format = 'n';

inputNumber3.value = 3.5;
inputNumber3.format = 'c2';
inputNumber3.step = 0.5;
inputNumber3.min = 0;
inputNumber3.max = 10;

inputNumber4.placeholder = 'Enter a number...';
inputNumber4.required = false;
inputNumber4.value = null;
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>Unbound with "n0" format</label>
                        <input id="inInputNumber1" type="text">
                    </div>
                    <div class="app-input-group">
                        <label>Bound with "n" format</label>
                        <input id="inInputNumber2" type="text">
                    </div>
                    <div class="app-input-group">
                        <label>Bound with min (0), max (10), step, and "c2" format</label>
                        <input id="inInputNumber3" type="text">
                    </div>
                    <div class="app-input-group">
                        <label>Unbound with placeholder and required"false""</label>
                        <input id="inInputNumber4" type="text">
                    </div>
                </div>
            </div>
        </div>

        <!-- Menu -->
        <div>
            <h2>Menu</h2>
            <p>
                The Menu control allows you to create a simple drop-down list with clickable items. The Menu's
                items can be defined directly or by using the <b>itemsSource</b> property similar to the ComboBox.
                To specify the text displayed on the Menu, you can set the <b>header</b> property.
            </p>
            <p>
                The Menu control offers two ways to handle user selections, specifying a command on each menu item
                and the <b>itemClicked</b> event. Unlike the <b>itemClicked</b> event, commands are objects that
                implement two methods:
            </p>
            <ul>
                <li>
                    <b>executeCommand(param)</b>: A method that executes the command.
                </li>
                <li>
                    <b>canExecuteCommand(param)</b>: A method that returns a Boolean value specifying whether or
                    not the command can be executed. If the return value is false, the menu item is disabled automatically.
                </li>
            </ul>
            <p>
                The example below demonstrates how to use both approaches.
            </p>
            <div class="row">
                <div class="col-md-6">
                    <div>
                        <ul class="nav nav-tabs" role="tablist">
                            <li class="active"><a href="#mHtml" role="tab" data-toggle="tab">HTML</a></li>
                            <li><a href="#mJs" role="tab" data-toggle="tab">JS</a></li>
                        </ul>
                        <div class="tab-content">
                            <div class="tab-pane active pane-content" id="mHtml">
&lt;div&gt;
  &lt;label&gt;itemClicked Event&lt;/label&gt;
  &lt;select id="mFileMenu"&gt;
    &lt;option&gt;New: create a new document&lt;/option&gt;
    &lt;option&gt;Open: load an existing document from a file&lt;/option&gt;
    &lt;option&gt;Save: save the current document to a file&lt;/option&gt;
    &lt;option&gt;&lt;/option&gt;
    &lt;option&gt;Exit: save changes and exit the application&lt;/option&gt;
  &lt;/select&gt;
  &lt;select id="mEditMenu"&gt;
    &lt;option&gt;Cut: move the current selection to the clipboard&lt;/option&gt;
    &lt;option&gt;Copy: copy the current selection to the clipboard&lt;/option&gt;
    &lt;option&gt;Paste: insert the clipboard content at the cursor position&lt;/option&gt;
    &lt;option&gt;&lt;/option&gt;
    &lt;option&gt;Find: search the current document for some text&lt;/option&gt;
    &lt;option&gt;Replace: replace occurrences of a string in the current document&lt;/option&gt;
  &lt;/select&gt;
&lt;div&gt;
  &lt;label&gt;Commands&lt;/label&gt;
  &lt;select id="mCmdMenu"&gt;
    &lt;option cmd-param=".25"&gt;+ 25%&lt;/option&gt;
    &lt;option cmd-param=".10"&gt;+ 10%&lt;/option&gt;
    &lt;option cmd-param=".05"&gt;+ 5%&lt;/option&gt;
    &lt;option cmd-param=".01"&gt;+ 1%&lt;/option&gt;
    &lt;option&gt;&lt;/option&gt;
    &lt;option cmd-param="-.01"&gt;- 1%&lt;/option&gt;
    &lt;option cmd-param="-.25"&gt;- 25%&lt;/option&gt;
    &lt;option cmd-param="-.05"&gt;- 5%&lt;/option&gt;
    &lt;option cmd-param="-.10"&gt;- 10%&lt;/option&gt;
  &lt;/select&gt;
  &lt;input id="mInputNumber" type="text" /&gt;
&lt;/div&gt;
                            </div>
                            <div class="tab-pane pane-content" id="mJs">
var fileMenu = new wijmo.input.Menu('#mFileMenu');
var editMenu = new wijmo.input.Menu('#mEditMenu');
var cmdMenu = new wijmo.input.Menu('#mCmdMenu');
var inputNumber = new wijmo.input.InputNumber('#mInputNumber');

fileMenu.header = 'File';
fileMenu.itemClicked.addHandler(itemClicked);

editMenu.header = 'Edit';
editMenu.itemClicked.addHandler(itemClicked);

cmdMenu.header = 'Change Tax';

// set command object for the command menu
cmdMenu.command = {
  executeCommand: function (arg) {

    // convert argument to Number
    arg = wijmo.changeType(arg, wijmo.DataType.Number);
    
    // check if the conversion was successful
    if (wijmo.isNumber(arg)) {

      // update the value
      inputNumber.value += arg;
    }
  },
  canExecuteCommand: function (arg) {
    // convert argument to Number
    arg = wijmo.changeType(arg, wijmo.DataType.Number);
    
    // check if the conversion was successful
    if (wijmo.isNumber(arg)) {
      var val = inputNumber.value + arg;
      
      // check if the value is valid
      return val >= 0 && val <= 1;="" }="" return="" false;="" }="" };="" inputnumber.value="0.07;" inputnumber.step="0.05;" inputnumber.format='p0' ;="" inputnumber.min="0;" inputnumber.max="1;" itemclicked="" event="" handler="" for="" file="" and="" edit="" menus="" function="" itemclicked(sender)="" {="" alert('you\'ve="" selected="" option="" '="" +="" sender.selectedindex="" +="" '="" from="" the="" '="" +="" sender.header="" +="" '="" menu!');="" }=""></=></div>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <h4>Result (live):</h4>
                    <div class="app-input-group">
                        <label>itemClicked Event</label>
                        <select id="mFileMenu">
                            <option>New: create a new document
                            <option>Open: load an existing document from a file
                            <option>Save: save the current document to a file
                            <option>
                            <option>Exit: save changes and exit the application
                        </select>
                        <select id="mEditMenu">
                            <option>Cut: move the current selection to the clipboard
                            <option>Copy: copy the current selection to the clipboard
                            <option>Paste: insert the clipboard content at the cursor position
                            <option>
                            <option>Find: search the current document for some text
                            <option>Replace: replace occurrences of a string in the current document
                        </select>
                    </div>
                    <div class="app-input-group">
                        <label>Commands</label>
                        <select id="mCmdMenu">
                            <option cmd-param=".25">+ 25%
                            <option cmd-param=".10">+ 10%
                            <option cmd-param=".05">+ 5%
                            <option cmd-param=".01">+ 1%
                            <option>
                            <option cmd-param="-.01">- 1%
                            <option cmd-param="-.05">- 5%
                            <option cmd-param="-.10">- 10%
                            <option cmd-param="-.25">- 25%
                        </select>
                        <input id="mInputNumber" type="text">
                    </div>
                </div>
            </div>
        </div>

    </div>
    <!-- sample scripts -->
    <script src="scripts/app.js" type="text/javascript"></script>
    <script src="scripts/gettingStarted.js" type="text/javascript"></script>
    <script src="scripts/autoComplete.js" type="text/javascript"></script>
    <script src="scripts/comboBox.js" type="text/javascript"></script>
    <script src="scripts/inputDateAndCalendar.js" type="text/javascript"></script>
    <script src="scripts/inputDateAndInputTime.js" type="text/javascript"></script>
    <script src="scripts/listBox.js" type="text/javascript"></script>
    <script src="scripts/inputNumber.js" type="text/javascript"></script>
    <script src="scripts/menu.js" type="text/javascript"></script>
</body>
</html>
